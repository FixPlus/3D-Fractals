CC = g++
CFLAGS = -std=c++17 -I./external -I./external/glm -I./external/gli -I./base -O2
LDFLAGS =  -L./libs/vulkan/lib32 -L./base -L./libs/assimp/32bit -L./libs/assimp/zlib  -lvulkan-1 -static -lassimp  -lgdi32 -static-libgcc -static-libstdc++  -static -lpthread 

ZLIBOBJS = libs/zlib/adler32.o libs/zlib/compress.o libs/zlib/crc32.o libs/zlib/deflate.o libs/zlib/gzclose.o libs/zlib/gzlib.o libs/zlib/gzread.o \
       libs/zlib/gzwrite.o libs/zlib/infback.o libs/zlib/inffast.o libs/zlib/inflate.o libs/zlib/inftrees.o libs/zlib/trees.o libs/zlib/uncompr.o libs/zlib/zutil.o

DEFS = -D _WIN32 -D VK_USE_PLATFORM_WIN32_KHR

BASE_SOURCES =   base/vulkanexamplebase.cpp base/VulkanTools.cpp base/VulkanDebug.cpp base/VulkanUIOverlay.cpp external/imgui/imgui.cpp external/imgui/imgui_draw.cpp external/imgui/imgui_widgets.cpp external/imgui/imgui_demo.cpp

CODE_DIRECTORY = code

ALL_SOURCES = $(BASE_SOURCES) $(CODE_DIRECTORY)/main.cpp $(CODE_DIRECTORY)/VulkanExample.cpp $(CODE_DIRECTORY)/drawer.cpp

ALL_OBJECTS = $(ALL_SOURCES:.cpp=.o)

SHADER_DIR = ./shaders

SHADERS = $(SHADER_DIR)/background.vert $(SHADER_DIR)/background.frag $(SHADER_DIR)/uioverlay.vert $(SHADER_DIR)/uioverlay.frag
TEMP = $(SHADERS:.vert=.vert.spv)
COMP_SHADERS = $(TEMP:.frag=.frag.spv )

OBJECTS_TO_CLEAN = $(ALL_OBJECTS) 

EXEC = Fractal


$(EXEC): $(ALL_OBJECTS)
	$(CC) $(CFLAGS) $(ALL_OBJECTS) $(ZLIBOBJS)  -o $@ $(LDFLAGS) $(DEFS)

include .depend

all: $(EXEC) compile_shaders

.cpp.o:
	$(CC)  $(CFLAGS) -c -o $@ $< $(LDFLAGS) $(DEFINES) $(DEFS)

compile_shaders:
	./shaders/glslc.exe ./shaders/background.vert -o ./shaders/background.vert.spv
	./shaders/glslc.exe ./shaders/background.frag -o ./shaders/background.frag.spv
	./shaders/glslc.exe ./shaders/uioverlay.vert -o ./shaders/uioverlay.vert.spv
	./shaders/glslc.exe ./shaders/uioverlay.frag -o ./shaders/uioverlay.frag.spv

clean:
	rm -f $(OBJECTS_TO_CLEAN) *.o $(COMP_SHADERS) $(MAZE_EXEC) 
